# Структура проекта Android USB Messenger

## 1. app/src/main/java/com/example/loramessenger/MainActivity.java
```java
package com.example.loramessenger;

import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.widget.*;
import androidx.appcompat.app.AppCompatActivity;
import com.hoho.android.usbserial.driver.UsbSerialDriver;
import com.hoho.android.usbserial.driver.UsbSerialPort;
import com.hoho.android.usbserial.driver.UsbSerialProber;
import com.hoho.android.usbserial.util.SerialInputOutputManager;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.List;

public class MainActivity extends AppCompatActivity {

    private Spinner comPortSpinner;
    private EditText usernameField;
    private EditText inputField;
    private TextView chatArea;
    private Button sendButton;

    private UsbSerialPort usbSerialPort;
    private SerialInputOutputManager serialIoManager;
    private Handler mainThreadHandler = new Handler(Looper.getMainLooper());

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Initialize UI elements
        comPortSpinner = findViewById(R.id.comPortSpinner);
        usernameField = findViewById(R.id.usernameField);
        inputField = findViewById(R.id.inputField);
        chatArea = findViewById(R.id.chatArea);
        sendButton = findViewById(R.id.sendButton);

        // Get available COM ports
        List<UsbSerialDriver> availableDrivers = UsbSerialProber.getDefaultProber().findAllDrivers(getUSBManager());
        String[] portNames = new String[availableDrivers.size() + 1];
        portNames[0] = "Select Port";
        for (int i = 0; i < availableDrivers.size(); i++) {
            portNames[i + 1] = availableDrivers.get(i).getPorts().get(0).toString();
        }
        ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, portNames);
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        comPortSpinner.setAdapter(adapter);

        // COM port selection handler
        comPortSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                if (position > 0) {
                    connectToComPort(availableDrivers.get(position - 1));
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {
                disconnectFromComPort();
            }
        });

        // Send button handler
        sendButton.setOnClickListener(v -> sendMessage());
    }

    private void connectToComPort(UsbSerialDriver driver) {
        try {
            UsbSerialPort port = driver.getPorts().get(0);
            port.open(getUSBConnection(driver.getDevice()));
            port.setParameters(9600, UsbSerialPort.DATABITS_8, UsbSerialPort.STOPBITS_1, UsbSerialPort.PARITY_NONE);

            usbSerialPort = port;
            startListeningForMessages();
        } catch (IOException e) {
            Toast.makeText(this, "Failed to connect to COM port", Toast.LENGTH_SHORT).show();
        }
    }

    private void disconnectFromComPort() {
        if (serialIoManager != null) {
            serialIoManager.stop();
            serialIoManager = null;
        }
        if (usbSerialPort != null) {
            try {
                usbSerialPort.close();
            } catch (IOException ignored) {}
            usbSerialPort = null;
        }
    }

    private void startListeningForMessages() {
        serialIoManager = new SerialInputOutputManager(usbSerialPort, new SerialInputOutputManager.Listener() {
            @Override
            public void onNewData(final byte[] data) {
                mainThreadHandler.post(() -> updateChat(new String(data)));
            }

            @Override
            public void onRunError(Exception e) {
                e.printStackTrace();
            }
        });
        new Thread(serialIoManager).start();
    }

    private void sendMessage() {
        if (usbSerialPort == null || !usbSerialPort.isOpen()) {
            Toast.makeText(this, "No COM port selected or connected!", Toast.LENGTH_SHORT).show();
            return;
        }

        String username = usernameField.getText().toString().trim();
        String message = inputField.getText().toString().trim();

        if (!username.isEmpty() && !message.isEmpty()) {
            String fullMessage = username + ": " + message;
            updateChat(fullMessage);

            try {
                usbSerialPort.write(fullMessage.getBytes(), 1000);
            } catch (IOException e) {
                e.printStackTrace();
            }

            inputField.setText("");
        }
    }

    private void updateChat(String message) {
        chatArea.append(message + "\n");
        ScrollView scrollView = findViewById(R.id.scrollView);
        scrollView.fullScroll(ScrollView.FOCUS_DOWN);
    }

    private android.hardware.usb.UsbManager getUSBManager() {
        return (android.hardware.usb.UsbManager) getSystemService(USB_SERVICE);
    }

    private android.hardware.usb.UsbDeviceConnection getUSBConnection(android.hardware.usb.UsbDevice device) {
        return getUSBManager().openDevice(device);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        disconnectFromComPort();
    }
}
```

## 2. app/src/main/res/layout/activity_main.xml
```xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="20dp">

    <!-- COM Port Selection -->
    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Select COM Port:" />
    <Spinner
        android:id="@+id/comPortSpinner"
        android:layout_width="match_parent"
        android:layout_height="wrap_content" />

    <!-- Username Field -->
    <EditText
        android:id="@+id/usernameField"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter your name"
        android:inputType="text" />

    <!-- Chat Area -->
    <ScrollView
        android:id="@+id/scrollView"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1">
        <TextView
            android:id="@+id/chatArea"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Chat Area" />
    </ScrollView>

    <!-- Message Input -->
    <EditText
        android:id="@+id/inputField"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter message"
        android:inputType="text" />

    <!-- Send Button -->
    <Button
        android:id="@+id/sendButton"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Send" />
</LinearLayout>
```

## 3. app/src/main/AndroidManifest.xml
```xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.loramessenger">

    <!-- USB Permission -->
    <uses-permission android:name="android.permission.USB_PERMISSION" />
    
    <!-- USB Feature -->
    <uses-feature android:name="android.hardware.usb.host" />

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.AppCompat">

        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>

            <!-- USB Device Filter -->
            <intent-filter>
                <action android:name="android.hardware.usb.action.USB_DEVICE_ATTACHED" />
            </intent-filter>
            <meta-data
                android:name="android.hardware.usb.action.USB_DEVICE_ATTACHED"
                android:resource="@xml/device_filter" />
        </activity>
    </application>
</manifest>
```

## 4. app/build.gradle
```gradle
plugins {
    id 'com.android.application'
}

android {
    compileSdkVersion 33
    
    defaultConfig {
        applicationId "com.example.loramessenger"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
    }
    
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'com.hoho.android:usb-serial-for-android:3.4.0'
}
```

## 5. build.gradle (корневой файл)
```gradle
buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.0.0'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
```

## 6. gradle/wrapper/gradle-wrapper.properties
```properties
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.0-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
```

## 7. app/src/main/res/xml/device_filter.xml
```xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Разрешить все USB устройства -->
    <usb-device />
</resources>
```

## 8. .github/workflows/android.yml
```yaml
name: Android CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew build
      
    - name: Build debug APK
      run: ./gradlew assembleDebug
      
    - name: Upload APK
      uses: actions/upload-artifact@v3
      with:
        name: app-debug
        path: app/build/outputs/apk/debug/app-debug.apk
```

## Инструкция по использованию:

1. Создайте новый репозиторий на GitHub
2. Создайте все папки и файлы с указанной структурой
3. Скопируйте содержимое каждого файла из этого списка
4. После загрузки всех файлов, GitHub Actions автоматически начнет сборку
5. APK файл будет доступен в разделе Actions > Artifacts

Важно соблюдать структуру папок:
```
├── .github
│   └── workflows
│       └── android.yml
├── app
│   ├── build.gradle
│   └── src
│       └── main
│           ├── AndroidManifest.xml
│           ├── java
│           │   └── com
│           │       └── example
│           │           └── loramessenger
│           │               └── MainActivity.java
│           └── res
│               ├── layout
│               │   └── activity_main.xml
│               └── xml
│                   └── device_filter.xml
├── build.gradle
└── gradle
    └── wrapper
        └── gradle-wrapper.properties
```
